#!/usr/bin/python -O

"""
   get message from a qpid broker
"""
import sys, os
import time


import qpid.messaging.exceptions

import Amqp
from Amqp.QpidWrapper import Producer

from getter import Getter

# -- main start here --
def main():
    """ main function """
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option('-b', '--broker', dest = 'brokers', action='append',
          help='one or more address of the broker to subscribe')
    parser.add_option('-k', '--binding-key', dest = 'bindingKeys',
          action='append',
          help='routing keys to subscribe')
    parser.add_option('--proto-src', dest ='protoSrc', action='store',
          default = '../publications',
          help='directory to store subscribe, [default: %default]')
    parser.add_option('-o', '--output', dest ='out',
          action='store', default = sys.stdout,
          help='file to dump message text, [default: stdout]')
    parser.add_option('--forward',
          help='where to forward the publication')
    parser.add_option('--brief',
          action='store_true', default=False,
          help='only display routing key, [default: %default]')

    (opts, _args) = parser.parse_args()

    if opts.brokers is None:
        print 'Please specify brokers'
        parser.print_help()
        sys.exit(1)

    if __debug__:
        print opts.brokers
        print opts.bindingKeys

    exchange = 'amq.topic'

    if opts.out == sys.stdout:
        output = sys.stdout
    else:
        output = open(opts.out, 'w')

    Amqp.set_proto_src(opts.protoSrc)

    producer = Producer(opts.forward) if opts.forward else None

    getters = [Getter(broker, exchange, opts.bindingKeys,
                      output, opts.brief, producer)
                  for broker in opts.brokers]


    try:
        for getter in getters:
            getter.start()

        getter_alive = True
        while getter_alive:
            getter_alive = any(getter.is_alive() for getter in getters)

            time.sleep(5)
    except KeyboardInterrupt:
        print '\nControl-C pressed, exiting...'

    except qpid.messaging.exceptions.ConnectionError:
        print 'Lost connection, exit...'

    except qpid.messaging.exceptions.MalformedAddress:
        print 'Malformed routingkey'

    finally:
        for getter in getters:
            print 'Terminate', getter.name
            getter.stop()

    if output != sys.stdout:
        output.close()


if __name__ == '__main__':
    main()
