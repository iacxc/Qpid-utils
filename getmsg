#!/usr/bin/python -O

"""
   get message from a qpid broker
"""
import sys, os
import time

from threading import Thread
import qpid.messaging.exceptions

import Amqp
from Amqp.RoutingKey import RoutingKey
from Amqp.QpidWrapper import Consumer
from protomsg import GpbMessage

def dispatch_msg(msg, proto_path, output=sys.stdout):
    """ dispatch the message"""
    if msg.subject:
        keystr = msg.subject
    else:
        keystr = msg.properties.get('x-amqp-0-10.routing-key')

    print 'Received event with routing key:', keystr

    if msg.content_type != 'application/x-protobuf':
        print msg.content_type
        print 'Not a google protobuf message'
#       return

    if output != sys.stdout:
        output.write('/@ routing key\n%s\n@/\n' % keystr)

    routingkey = RoutingKey(keystr)

    pmsg = GpbMessage(proto_path, routingkey.package, routingkey.publication)

    from google.protobuf.message import DecodeError
    try:
        pmsg.loads(msg.content)

        amsg = GpbMessage(proto_path, routingkey.package, 
                                      routingkey.publication)
        outtpa = pmsg.dumptabs()

        field = pmsg.get_field('header')
        if field:
            header_class = field.__class__.__name__
            field_name = {'info_header'   : 'header.info_component_id',
                          'event_header'  : 'header.header.info_component_id',
                          'perf_header'   : 'header.header.info_component_id',
                          'health_header' : 'header.header.info_component_id'
                         }.get(header_class, 'info_component_id')
        else:
            field = pmsg.get_field('checkinfo')
            if field: #layer_check
                field_name = 'checkinfo.header.header.info_component_id'
            else: #normal health check
                field_name = 'subjectinfo.header.header.info_component_id'

        amsg.loadtabs(outtpa, pmsg.field_value(field_name))

        if outtpa != amsg.dumptabs():
            raise AssertionError("Error for tpa:%s", routingkey)

        bmsg = GpbMessage(proto_path, routingkey.package, 
                                      routingkey.publication)
        outjson = pmsg.dumpjson()
        bmsg.loadjson(outjson)

        if outjson != bmsg.dumpjson():
            raise AssertionError("Error for json:%s", routingkey)

        if __debug__ or output != sys.stdout:
            output.write('/@ Tpa string\n%s\n@/\n/=\n%s=/\n\n' % (outtpa, pmsg))
            output.flush()

    except DecodeError:
        print 'Decode error for key: %s' % keystr
        output.write('Decode error for key: %s\n' % keystr)
    except Exception, exception:
        print exception


class Getter(Thread):
    """ class Getter """
    def __init__(self, broker, exchange, binding_keys, proto_path,
                   output=sys.stdout):
        super(Getter, self).__init__()

        self.__broker = broker
        self.__exchange = exchange
        self.__binding_keys = binding_keys
        self.__proto_path = proto_path
        self.__output = output

        self.__exit = False
        self.__receiver = None


    def run(self):
        if __debug__:
            print self.name, 'Start'

        while not self.__exit:
            try:
                if not self.__receiver:
                    self.__receiver = Consumer(self.__broker,
                                           self.__exchange,
                                           self.__binding_keys)

                msg = self.__receiver.fetch(15)

                dispatch_msg(msg, self.__proto_path, self.__output)

            except qpid.messaging.exceptions.ConnectError:
                print '%s Could not connect to  %s, try again...' % (
                        self.name, self.__broker)
                time.sleep(5)

            except qpid.messaging.exceptions.ConnectionError:
                print 'Lost connection to %s, try again...' % self.__broker
                self.__receiver = None
                time.sleep(5)

            except qpid.messaging.exceptions.Empty:
                if __debug__:
                    print 'No message, waiting...'

        if __debug__:
            print self.name, 'Finished'


    def join(self, timeout=None):
        self.__exit = True
        if __debug__:
            print 'Stoping', self.name
        super(Getter, self).join(timeout)


# -- main start here --
def main():
    """ main function """
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option('-b', '--broker', dest = 'brokers', action='append',
          help='one or more address of the broker to subscribe')
    parser.add_option('--proto-src', dest ='protoSrc', action='store',
          default = os.getenv('SEAPILOT_HOME') + '/etc/publications',
          help='directory to store subscribe, default [%default]')
    parser.add_option('-o', '--output', dest ='out',
          action='store', default = sys.stdout,
          help='file to dump message text, default [stdout]')
    parser.add_option('-k', '--binding-key', dest = 'bindingKeys',
          action='append',
          help='routing keys to subscribe')

    (opts, _args) = parser.parse_args()

    if __debug__:
        print opts.brokers
        print opts.bindingKeys

    exchange = 'amq.topic'

    if opts.out == sys.stdout:
        output = sys.stdout
    else:
        output = open(opts.out, 'w')

    threads = [Getter(broker, exchange, opts.bindingKeys, opts.protoSrc, output)
                  for broker in opts.brokers]


    try:
        for thread in threads:
            thread.start()

        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print '\nControl-C pressed, exiting...'

    except qpid.messaging.exceptions.ConnectionError:
        print 'Lost connection, exit...'

    except qpid.messaging.exceptions.MalformedAddress:
        print 'Malformed routingkey'

    #finally:
    for thread in threads:
        print 'Terminate', thread.name
        thread.join()

    if output != sys.stdout:
        output.close()


if __name__ == '__main__':
    main()
